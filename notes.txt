import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:provider/provider.dart';
import 'main.dart';
import 'models/user.dart';
import 'dart:convert';


//-------------------------UNSPLASH IMAGE---------------------------------//
class Ressources {
  late String id;
  late String title;
  late String liens;
  late String description;
  String? createdAt; //Optional

  Ressources({
    required this.id,
    required this.title,
    required this.liens,
    required this.description,
    this.createdAt,
  });

  factory Ressources.fromJson(Map<String, dynamic> json) {
    return Ressources(
      id: json['id'],
      title: json['attributes']['title'],
      liens: json['attributes']['liens'],
      description: json['attributes']['description'],
      createdAt: json['attributes']['createdAt'],
    );
  }
}


//----------------------------CALL API---------------------------------//
Future<List<Ressources>> fetchRessources() async {
  final response = await http
      .get(Uri.parse(
      'https://personalps.herokuapp.com/api/ressources'));
  if (response.statusCode == 200) {
    List jsonResponse = json.decode(response.body);
    return jsonResponse.map((job) => Ressources.fromJson(job)).toList();
  } else {
    throw Exception('Failed to load album');
  }
}




void main() {
  runApp(
    ChangeNotifierProvider(
      create: (context) => UserManager(),
      child: const MyApp(),
    ),
  );
}


class RessourcePage extends StatefulWidget {
  const RessourcePage({Key? key, required this.title}) : super(key: key);

  final String title;

  @override
  State<RessourcePage> createState() => _RessourcePageState();

}


class _RessourcePageState extends State<RessourcePage> {

  Future<List<Ressources>>? ressources;

  @override
  void initState() {
    super.initState();
    ressources = fetchRessources();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(

        title: Text(widget.title),
      ),
      body: Center(
        child: Container(
            child : FutureBuilder<List<Ressources>>(
                future: ressources,
                builder: (context, snapshot) {
                  if (snapshot.hasData) {
                    return Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: GridView.builder(
                            itemCount: snapshot.data!.length,
                            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                              crossAxisCount: 2,),
                            itemBuilder: (BuildContext context, int i) {
                              return Card(
                                  child: Container(
                                    decoration: BoxDecoration(
                                        border: Border.all(
                                            width: 0.5, color: Colors.grey)
                                    ),
                                    child: Container(
                                      child: Image.network(
                                        snapshot.data![i].title,
                                        fit: BoxFit.cover,
                                      ),
                                    ),
                                  ),
                                );
                            }
                        )
                    );
                  } else if (snapshot.hasError) {
                    return Text('${snapshot.error}');
                  } else {
                    return const Text('no data');
                  }
                }
            ),
        ),

      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {},
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
